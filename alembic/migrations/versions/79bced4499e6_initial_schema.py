"""initial schema

Revision ID: 79bced4499e6
Revises: 
Create Date: 2025-07-08 20:01:52.028476

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '79bced4499e6'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('coord',
    sa.Column('x', sa.SmallInteger(), nullable=False),
    sa.Column('y', sa.SmallInteger(), nullable=False),
    sa.PrimaryKeyConstraint('x', 'y')
    )
    op.create_table('cell',
    sa.Column('cell_id', sa.SmallInteger(), nullable=False),
    sa.Column('map_id', sa.SmallInteger(), nullable=False),
    sa.Column('zone_code', sa.Integer(), nullable=True),
    sa.Column('x', sa.SmallInteger(), nullable=True),
    sa.Column('y', sa.SmallInteger(), nullable=True),
    sa.ForeignKeyConstraint(['map_id'], ['map.map_id'], ),
    sa.ForeignKeyConstraint(['x', 'y'], ['coord.x', 'coord.y'], ),
    sa.PrimaryKeyConstraint('cell_id', 'map_id')
    )
    op.create_table('commit',
    sa.Column('commit_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('pnu', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.SmallInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['pnu'], ['place.pnu'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('commit_id')
    )
    op.create_index('idx_commit_pnu', 'commit', ['pnu'], unique=False)
    op.create_index('idx_commit_user_pnu', 'commit', ['user_id', 'pnu'], unique=False)
    op.create_table('unit',
    sa.Column('unit_code', sa.BigInteger(), nullable=False),
    sa.Column('cell_id', sa.SmallInteger(), nullable=False),
    sa.Column('map_id', sa.SmallInteger(), nullable=False),
    sa.ForeignKeyConstraint(['cell_id', 'map_id'], ['cell.cell_id', 'cell.map_id'], ),
    sa.PrimaryKeyConstraint('unit_code')
    )
    op.create_index('idx_unit_cell', 'unit', ['cell_id', 'map_id'], unique=False)
    op.drop_table('sub_zone')
    op.add_column('grass', sa.Column('commit_id', sa.BigInteger(), nullable=False))
    op.add_column('grass', sa.Column('cell_id', sa.SmallInteger(), nullable=False))
    op.alter_column('grass', 'grass_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('grass', 'map_id',
               existing_type=sa.INTEGER(),
               type_=sa.SmallInteger(),
               existing_nullable=False)
    op.create_index('idx_grass_cell', 'grass', ['cell_id', 'map_id'], unique=False)
    op.drop_constraint(op.f('grass_user_id_fkey'), 'grass', type_='foreignkey')
    op.drop_constraint(op.f('grass_map_id_fkey'), 'grass', type_='foreignkey')
    op.drop_constraint(op.f('grass_pnu_fkey'), 'grass', type_='foreignkey')
    op.create_foreign_key(None, 'grass', 'cell', ['cell_id', 'map_id'], ['cell_id', 'map_id'])
    op.create_foreign_key(None, 'grass', 'commit', ['commit_id'], ['commit_id'])
    op.drop_column('grass', 'created_at')
    op.drop_column('grass', 'pnu')
    op.drop_column('grass', 'user_id')
    op.add_column('map', sa.Column('map_level', sa.SmallInteger(), nullable=True))
    op.alter_column('map', 'map_id',
               existing_type=sa.INTEGER(),
               type_=sa.SmallInteger(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('map', 'map_code',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               nullable=True)
    op.drop_column('map', 'x')
    op.drop_column('map', 'y')
    op.drop_column('map', 'zone_code')
    op.add_column('place', sa.Column('address', sa.Text(), nullable=False))
    op.alter_column('place', 'name',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=False)
    op.add_column('user', sa.Column('email', sa.String(length=255), nullable=True))
    op.add_column('user', sa.Column('provider', sa.String(length=20), nullable=False))
    op.add_column('user', sa.Column('provider_id', sa.String(length=255), nullable=False))
    op.alter_column('user', 'user_id',
               existing_type=sa.INTEGER(),
               type_=sa.SmallInteger(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('user_user_id_seq'::regclass)"))
    op.alter_column('user', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.create_index('uq_user_provider_id', 'user', ['provider', 'provider_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('uq_user_provider_id', table_name='user')
    op.alter_column('user', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('user', 'user_id',
               existing_type=sa.SmallInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('user_user_id_seq'::regclass)"))
    op.drop_column('user', 'provider_id')
    op.drop_column('user', 'provider')
    op.drop_column('user', 'email')
    op.alter_column('place', 'name',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('place', 'address')
    op.add_column('map', sa.Column('zone_code', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('map', sa.Column('y', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('map', sa.Column('x', sa.INTEGER(), autoincrement=False, nullable=False))
    op.alter_column('map', 'map_code',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               nullable=False)
    op.alter_column('map', 'map_id',
               existing_type=sa.SmallInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('map', 'map_level')
    op.add_column('grass', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('grass', sa.Column('pnu', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('grass', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'grass', type_='foreignkey')
    op.drop_constraint(None, 'grass', type_='foreignkey')
    op.create_foreign_key(op.f('grass_pnu_fkey'), 'grass', 'place', ['pnu'], ['pnu'])
    op.create_foreign_key(op.f('grass_map_id_fkey'), 'grass', 'map', ['map_id'], ['map_id'])
    op.create_foreign_key(op.f('grass_user_id_fkey'), 'grass', 'user', ['user_id'], ['user_id'])
    op.drop_index('idx_grass_cell', table_name='grass')
    op.alter_column('grass', 'map_id',
               existing_type=sa.SmallInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('grass', 'grass_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('grass', 'cell_id')
    op.drop_column('grass', 'commit_id')
    op.create_table('sub_zone',
    sa.Column('sub_zone_code', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('map_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['map.map_id'], name=op.f('sub_zone_map_id_fkey')),
    sa.PrimaryKeyConstraint('sub_zone_code', name=op.f('sub_zone_pkey'))
    )
    op.drop_index('idx_unit_cell', table_name='unit')
    op.drop_table('unit')
    op.drop_index('idx_commit_user_pnu', table_name='commit')
    op.drop_index('idx_commit_pnu', table_name='commit')
    op.drop_table('commit')
    op.drop_table('cell')
    op.drop_table('coord')
    # ### end Alembic commands ###
